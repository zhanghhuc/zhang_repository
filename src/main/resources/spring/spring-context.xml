<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		 http://www.springframework.org/schema/task
    	http://www.springframework.org/schema/task/spring-task-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">


	<mvc:annotation-driven />

	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="ocf.*" />

	<task:annotation-driven />

	<!-- 读入配置属性文件 <context:property-placeholder location="classpath:public_system.properties" 
		/> -->

	 <context:property-placeholder location="classpath:jdbc.properties" />
	 <import resource="classpath:spring/spring-mybatis.xml"/>
		
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
			</list>
		</property>
	</bean>

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="10485760000"></property>
		<property name="maxInMemorySize" value="40960"></property>
	</bean>


	<!-- spring quartz -->
	<bean class="ocf.jobListener.UserJobListener" id="jobListener" name="userListener"></bean>
	<bean id="userJob" class="ocf.job.UserJob" />
	<bean id="SpringQtzJobMethod"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="userJob" />
		</property>
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>execute</value>
		</property>
		<property name="jobListenerNames">
			<list>
				<value>job_listener</value>
			</list>
		</property>
	</bean>

	<bean id="CronTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="SpringQtzJobMethod"></property>
		<property name="cronExpression" value="* * * * * ?"></property>
	</bean>
	
	<bean id="SpringJobSchedulerFactoryBean" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" >  
	    <property name="triggers">  
	        <list>
	            <ref bean="CronTriggerBean"/>
	        </list>
	    </property>  
	    <property name="jobListeners">
	    	<list>
	    		<ref bean="jobListener"/>
	    	</list>
	    </property>
	</bean>   
	
	<bean id="threadPoolTaskExecutor"
      class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
      <!-- 核心线程数，默认为1 -->
      <property name="corePoolSize" value="2" />

      <!-- 最大线程数，默认为Integer.MAX_VALUE -->
      <property name="maxPoolSize" value="5" />

      <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE
          <property name="queueCapacity" value="1000" /> -->

      <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
      <property name="keepAliveSeconds" value="300" />

      <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
      <property name="rejectedExecutionHandler">
          <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
          <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
          <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
          <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
          <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
      </property>
    </bean>
</beans>